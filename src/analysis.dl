.type X = symbol
.type Y = symbol

.decl Node(x:X, s:number)
.decl NNode(x:X, s:number) choice-domain (x)
.decl PStates(x:X, s:number) choice-domain (x, s)
.decl NStates(x:X, s:number) choice-domain (x, s)
.decl Edge(x:X, y:Y) choice-domain (x, y)
.decl S(x:X, xs:number, y:Y, ys:number) choice-domain (x, y)
.decl Out(x:X, xs:number)

.input Node(IO=file, filename="nodes-intermediate.csv", delimiter=",")
.input Edge(IO=file, filename="edges.csv", delimiter=",")
.output Out(IO=file, filename="out.csv", delimiter=",")


S(x, xs, y, ys) :- Edge(x, y), Node(x, xs), Node(y, ys).
S(y, ys, x, xs) :- Edge(x, y), Node(x, xs), Node(y, ys).

PStates(x, 0) :- Node(x, _).
PStates(x, i) :- Node(x, _), i = count : { S(x, _, _, 1) }.
NStates(x, 0) :- Node(x, _).
NStates(x, i) :- Node(x, _), i = count : { S(x, _, _, 0) }.

NNode(x, 1) :- Node(x, _), PStates(x, j), NStates(x, k), j > k.
NNode(x, 0) :- Node(x, _), PStates(x, j), NStates(x, k), j < k.

Out(x, s) :- NNode(x, s).

